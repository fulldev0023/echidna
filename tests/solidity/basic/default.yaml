# Number of fuzzing workers to run, should not exceed the number of available cores.
workers: 1

# Test mode, one of: property, assertion, overflow, exploration, optimization.
testMode: "property"

# Directory to save the corpus and coverage reports; disabled by default
corpusDir: null
# List of file formats to save coverage reports in; default is all possible formats
coverageFormats: ["txt","html","lcov"]
# If specified, disables the interactive UI and prints the results to stdout.
# Can be "text", "json" or "none".
format: null
# Produces (much) less verbose output
quiet: false

# Check if some contract was destructed or not
testDestruction: false

# psender is the sender for property transactions; by default intentionally
# the same as contract deployer
psender: "0x10000"

# Prefix used to find property functions. Property functions don't take any
# arguments and return bool.
prefix: "echidna_"

# The number of transactions generated in a test sequence.
seqLen: 100
# The number of test sequences to run.
testLimit: 50000
# How many attemts to run when shrinking the failing sequences.
shrinkLimit: 5000

# Stop fuzzing as soon as any property fails and has been shrunk.
stopOnFail: false
# Whether coverage-guided fuzzing is enabled.
coverage: true
# Address of the contract itself
contractAddr: "0x00a329c0648769a73afac7f9381e08fb43dbea72"
# Address of the contract deployer (who often is privileged owner, etc.)
deployer: "0x30000"
# Set of addresses transactions may originate from
sender: ["0x10000", "0x20000", "0x30000"]
# Default balance for addresses
balanceAddr: 0xffffffff
# Overrides balanceAddr for the contract address
balanceContract: 0
# Max code size for deployed contratcs (default 24576, per EIP-170)
codeSize: 0x6000

# Pass additional CLI options to crytic-compile.
# See: https://github.com/crytic/crytic-compile
cryticArgs: []
# Pass additional CLI options to solc.
solcArgs: ""
# solcLibs is solc libraries
solcLibs: []

# Initialize the blockchain with some data
initialize: null
# Initialize the blockchain with some predeployed contracts in some addresses
deployContracts: []
# Initialize the blockchain with some bytecode in some addresses
deployBytecodes: []
# Whether ot not to fuzz all contracts
allContracts: false

# Set a timeout to stop fuzzing after N seconds.
timeout: null

# Use to fix the seed for random number generator. If not specified, a new
# random seed value is used every time. A positive integer.
# seed: 0

# How often to use echidna's internal dictionary vs random values while fuzzing.
# Value between 0 and 1.
dictFreq: 0.40

# Defines gas cost at which a property fails
propMaxGas: 8000030
# Gas limit; does not cause failure, but terminates a sequence
testMaxGas: 8000030
# Maximum gas price
maxGasprice: 0
# Maximum value to send to payable functions
maxValue: 100000000000000000000 # 100 eth
# Maximum time between generated txs; default is one week
maxTimeDelay: 604800
# Maximum number of blocks elapsed between generated txs; default is expected
# increment in one week
maxBlockDelay: 60480

# List of methods to filter
filterFunctions: []
# by default, blacklist methods in filterFunctions
filterBlacklist: true

# Enable the ffi HEVM cheatcode. It is disabled by default for security.
# See: https://hevm.dev/controlling-the-unit-testing-environment.html.
allowFFI: false

# Configure to perform "on-chain fuzzing".
# See: https://blog.trailofbits.com/2023/07/21/fuzzing-on-chain-contracts-with-echidna/
# URL to fetch contracts over RPC
rpcUrl: null
# Block number to use when fetching over RPC
rpcBlock: null

# ===
# NOTE: The experimental options below shouldn't be touched unless you know what you are doing.
# ===
# Constants for corpus mutations (for experimentation only)
mutConsts: [1, 1, 1, 1]
# Perform analysis of maximum gas costs for functions (experimental)
estimateGas: false
